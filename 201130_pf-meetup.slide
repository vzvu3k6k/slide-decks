# 事業をグロースさせるためにエンジニアができること

プラットフォーム事業本部
本田 雄亮

2020年11月30日
PF-Meetup

## 自己紹介

## 本田 雄亮（Honda Yusuke）

- 所属：プラットフォーム事業本部 総合トップ開発部 PointClubチーム
- 入社年：2019年（新卒入社）
- Twitter: @yyh-gl
- 運営：DMM.go

.image ./images/logo.jpg _ 336

## DMM.go

DMM社内のGo活用事例を紹介

.link https://inside.dmm.com/entry/2020/02/03/dmmgo-1 第1回目
.link https://inside.dmm.com/entry/2020/02/03/dmmgo-2 第2回目

.image ./images/dmmgo_logo.png

## 今日話すこと

私が所属するPointClubチームにて、<br>
<u>事業をグロースさせていくために大事にしている考え</u>を主題に置き、\
**エンジニアとしてなにができるのか、実際なにをしているのか**を話します

## 開発体制

## PointClubチーム

- 開発スタイル：アジャイル
- チームメンバー：13名ほど
  - バックエンド：6名
  - ネイティブ，プロダクトデザイナー，グロース/マーケティング など

<br>

.image ./images/201130_pf-meetup/pointclub.png _ 550

## チームとして大事にしている考え

## "最短距離でリリース"

最短距離でのリリースを続けることで事業をグロースさせていく

.image ./images/201130_pf-meetup/leadtime.png _ 700

弊チームPOの石垣がiOSDCで発表

.link https://speakerdeck.com/i35_267/organizational-structure-to-maximize-the-development-process 組織構造の力学を操作して、アプリ開発プロセスを最大化させる

## エンジニアとしてできること

**スピード感ある開発**

- 手戻りをなくす
- 自動化

100%は無理でも最大限頑張る

## 手戻りをなくす

## 手戻り ≒ だいたい認識差異

手戻りはたいていの場合、認識の差異から生まれる
- 仕様の認識差異
  - 例：表示したい情報が違う
- 技術的な認識差異
  - 例：必要な情報がAPIレスポンスに含まれていない<br>
    と思ったら、使っている単語が違うだけでちゃんと渡してたり…

<br>

このような状況では、話し合いの場が必要になり、遅延が発生

一発でばしっと決められると嬉しい

では、なにをすればいいのか ▶▶▶

## 仕様の認識差異をなくす

## なぜ仕様の認識差異が生まれる？

仕様の認識差異は、チームメンバー間（特にPO↔エンジニア間）で、<br>
なぜそれを作っているのか、すなわち、目的が一致していない場合に発生しやすい

<br>

エンジニアがその機能を**なぜ**作っているのか明確に意識できていれば発生しづらい

<br>

さらに、目的を理解していれば副次効果として、各エンジニアから仕様部分での改善策が出てきやすくなる


## 目的を合わせるためにできること

<u>みんなでユーザーストーリーマッピングを作成</u>

ユーザーストーリーマッピング：<br>
どういう機能が必要か、どのタイミングで提供すべきかといった情報を <br>
ユーザーストーリー（≒ユーザーにとっての価値）に対応させて表現可能 <br>

## ユーザーストーリーマッピング

.image ./images/201130_pf-meetup/userstorymapping1.png _ 780

## ユーザーストーリーマッピング

.image ./images/201130_pf-meetup/userstorymapping2.png _ 780

## ユーザーストーリーマッピング

.image ./images/201130_pf-meetup/userstorymapping3.png _ 780

## ユーザーストーリーマッピング

.image ./images/201130_pf-meetup/userstorymapping4.png _ 780

## ユーザーストーリーマッピング

.image ./images/201130_pf-meetup/userstorymapping5.png _ 780

## ユーザーストーリーマッピングの恩恵

今作っている機能が、ユーザーのどういったストーリーに紐づくのかが明確になる

<br>

**→ 機能実装の目的が明確になる**


## より詳しい話はPO 石垣の発表をどうぞ

.image ./images/201130_pf-meetup/organizational_structure_to_maximize_the_development.png _ 780

.link https://speakerdeck.com/i35_267/organizational-structure-to-maximize-the-development-process 組織構造の力学を操作して、アプリ開発プロセスを最大化させる


## 技術的な認識差異をなくす

## API定義レビュー

API定義に変更があったときはクライアントとバックエンドの両メンバーでレビュー <br>

**クライアントとバックエンド間でAPI定義に関する認識が一致**

API定義にはSwaggerを使用（共有方法は後述）

.image ./images/201130_pf-meetup/swagger.png _ 800

## デザインレビュー

Figma上でみんなでデザインをレビュー

- 技術的に実現が難しい箇所を早期に発見できる
- クライアントとバックエンドの共通言語として利用できる
- 画面デザインを知ることで、自分がなにを作っているのかイメージしやすくなる
  - その画面専用のAPIにならないように注意
- 仕様の認識差異発見にも活躍
  
## Figma上でデザインを確認可能

.image ./images/201130_pf-meetup/figma_design.png _ 800

## 自動化

## API定義共有作業の自動化

API定義に変更があった場合、<br>
CI経由で変更後のAPI定義（openapi.yaml）をS3にアップロード

アップロードされたAPI定義はSwagger UIを通して確認可能

Swagger UI自体はS3でホスティングされており、いつでもアクセス可能

.image ./images/201130_pf-meetup/swagger_detail.png _ 400

.link https://speakerdeck.com/yyh_gl/develop-api-server-by-goa Goaを使ってAPIサーバ開発してみた

## リリース作業の自動化

タグ打つ

リリースノートを自動生成

CIが自動実行

承認するとCD実行

テストポートが開く

実機テスト

リリース

## テーブル定義のドキュメント生成を自動化

STG環境にpushした時点で、その時点のDB定義をドキュメント化

## まとめ

<u>**事業グロースのために最短距離でリリース**</u>

最短距離でリリースするための取り組みを紹介

- 認識差異をなくすための努力
  - みんなでユーザーストーリーマッピング作成
  - みんなでAPI定義レビュー
  - みんなでデザインレビュー
- 自動化
  - API定義のドキュメント化
  - テーブル定義のドキュメント化
  - リリース作業




## メモ

https://www.timakin.com/posts/hacker-and-suits

## 事業内容の理解

ある判断をするときに、事業について理解しているかどうかはとても重要<br>

<br><br>

事業を理解することのメリット
- 事業として進むべき道すじを理解できる<br>
  → 正しい判断ができる可能性が高まる
  - 例：新機能検討時に本当に必要かどうかを全員で議論可能
- 事業（ビジネス）に興味がわく
  - 全員がPOとなり、サービス改善のスピード向上

## 事業内容を理解するためにやっていること

- POによる事業説明会

<br>

- 他社内事業の確認<br>
  → 定期的に他社内事業のPLを起点に事業の特徴を確認
  - 他を知ることは自分たちの事業の理解を加速させる

<br>

**POだけでなくみんなで事業を作っていく姿勢**

