# 事業をグロースさせるためにエンジニアができること

プラットフォーム事業本部
本田 雄亮

2020年11月30日
PF-Meetup

## 自己紹介

## 本田 雄亮（Honda Yusuke）

- 所属：プラットフォーム事業本部 総合トップ開発部 PointClubチーム
- 入社年：2019年（新卒入社）
- Twitter: @yyh-gl
- 運営：DMM.go

.image ./images/logo.jpg _ 336

## DMM.go

DMM社内のGo活用事例を紹介

.link https://inside.dmm.com/entry/2020/02/03/dmmgo-1 第1回目
.link https://inside.dmm.com/entry/2020/02/03/dmmgo-2 第2回目

.image ./images/dmmgo_logo.png

## 今日話すこと

私が所属するPointClubチームにて、<br>
<u>事業をグロースさせていくために大事にしている考え</u>を主題に置き、\
**エンジニアとしてなにができるのか、実際なにをしているのか**を話します

<br>

やってみて得られた結果も共有できればと思います

## 開発体制

## PointClubチーム

- 開発スタイル：アジャイル
- チームメンバー：13名ほど
  - バックエンド：6名
  - ネイティブ，プロダクトデザイナー，グロース/マーケティング など

<br>

.image ./images/201130_pf-meetup/pointclub.png _ 550

## チームとして大事にしている考え

## "最短距離でリリース"

最短距離でのリリースを続けることで事業をグロースさせていく

.image ./images/201130_pf-meetup/leadtime.png _ 700

弊チームPOの石垣がiOSDCで発表

.link https://speakerdeck.com/i35_267/organizational-structure-to-maximize-the-development-process 組織構造の力学を操作して、アプリ開発プロセスを最大化させる

## エンジニアとしてできること

**スピード感ある開発**

- 手戻りをなくす
- 自動化

100%は無理でも最大限頑張る

## 手戻りをなくす

## 手戻りはだいたい認識差異から生まれる

例えば
- 仕様の認識差異<br>
　→ 表示したい情報が違う🤭
- 技術的な認識差異<br>
　→ 必要な情報がAPIレスポンスに含まれていない<br>
   　　と思ったら、使っている単語が違うだけでちゃんと渡してたり…

<br>

このような状況では、話し合いや修正が必要になり、手戻りが発生

一発でばしっと決められると嬉しい

では、なにをすればいいのか ▶▶▶

## 仕様の認識差異をなくす

## なぜ仕様の認識差異が生まれる？

仕様の認識差異は、チームメンバー間（特にPO↔エンジニア間）で、<br>
なにを作るかが一致していない場合に発生

<br>

エンジニアが**なに**を作っているのか明確に意識できていれば発生しづらい <br>

<br>

そして、「なにを作るか」は**なぜ**作るかが分かっていると理解しやすい


## まずは「なぜ」を統一

**なぜ**作るかの認識を統一するために <br>
<u>みんなでユーザーストーリーマッピングを作成</u> することが有効

<br>

ユーザーストーリーマッピング：<br>
どういう機能が必要か、どのタイミングで提供すべきかといった情報を <br>
ユーザーストーリー（≒ユーザーにとっての価値）に対応させて表現可能 <br>

## ユーザーストーリーマッピング

.image ./images/201130_pf-meetup/userstorymapping1.png _ 780

## ユーザーストーリーマッピング

.image ./images/201130_pf-meetup/userstorymapping2.png _ 780

## ユーザーストーリーマッピング

.image ./images/201130_pf-meetup/userstorymapping3.png _ 780

## ユーザーストーリーマッピング

.image ./images/201130_pf-meetup/userstorymapping4.png _ 780

## ユーザーストーリーマッピング

.image ./images/201130_pf-meetup/userstorymapping5.png _ 780

## ユーザーストーリーマッピング

.image ./images/201130_pf-meetup/userstorymapping6.png _ 780

## ユーザーストーリーマッピングの恩恵

今作っている機能が、ユーザーのどういったストーリーに紐づくのかが明確になる

<br>

→ **なぜ**その機能が必要なのかが明確になるので、迷子になりにくい


## 「なに」を統一

**なに**を作るかの認識を統一するために、みんなでデザインをレビュー

Figma上でデザインを確認可能

.image ./images/201130_pf-meetup/figma_design.png _ 650


## 実際にこうした取り組みをやってみての感想

メンバー間の認識差異は少ない（…はず！）

加えて、なにをなぜ作るか理解していれば、各エンジニアから仕様部分での改善策が出てきやすくなる

<br>

開発が始まってから、認識差異が見つかったとしても、<br>
ユーザーストーリーマッピングやデザインという共通言語があるため、<br>
解決のための会話がスムーズに進む


## より詳しい話はPO 石垣の発表をどうぞ

<br>

.image ./images/201130_pf-meetup/organizational_structure_to_maximize_the_development.png _ 700

.link https://speakerdeck.com/i35_267/organizational-structure-to-maximize-the-development-process 組織構造の力学を操作して、アプリ開発プロセスを最大化させる


## 技術的な認識差異をなくす

## 技術的な認識差異をなくすために

- 日常的な認識合わせ
- 廃らないドキュメント作り

## 日常的な認識合わせ

## API定義レビュー

API定義に変更があったときはクライアントとバックエンドの両メンバーでレビュー <br>

API定義にはOpenAPI（Swagger）を使用

.image ./images/201130_pf-meetup/design_review.png _ 800

**クライアントとバックエンド間でAPI定義に関する認識が常に一致**

## API定義を確認する方法

API定義はSwagger UIを通して確認可能

Swagger UI自体はS3でホスティングされており、いつでもだれでもアクセス可能 <br>

.image ./images/201130_pf-meetup/swagger.png _ 750

## みんなでレビューすることで…

みんなで認識合わせをする機会（仕組み）を作ることにより<br>
メンバー間の認識が大きくずれることをなくし、手戻りを防止

<br>

加えて、異なる領域のメンバーがレビューすることで、<br>
様々な視点からの意見がもらえる（品質向上）

<br>

---

<br>

もしかして毎回openapi.yaml（ドキュメント）を手で更新してる…？🤔

→ API定義ドキュメントをどうやって生成し、共有しているかは後述


## 技術的な認識差異をなくすために

- 日常的な認識合わせ
- 廃らないドキュメント作り

## 廃らないドキュメント作り

## ドキュメントを廃れさせないためにできること

廃れたドキュメント＝内容が現実と乖離しているドキュメント

したがって、常に"現実"を基にドキュメントを作り続ければ廃れることはない

<br>

弊チームでは以下のドキュメントについて、<br>
コードを基に生成することで現実に則したドキュメントを生成

- API定義
- DBスキーマ定義

<br>

加えて、継続的にドキュメント生成する仕組み（生成自動化）により、<br>
ドキュメントを常に更新し、風化を防止 <br>

▶ 自動化周りの詳細は後述

## ここまでのまとめ

<u>手戻り防止を目的として、いろいろやってきた</u>

<br>

ユーザーストーリーマッピングやデザインレビューで仕様の認識を合わせ、<br>
日常的なレビューと廃れたドキュメントを作らない仕組み作りにより、<br>
技術的な認識を合わせた

<br>

ただし、これらの取り組みや仕組みを人の手作業だけで継続するのは難しいので、<br>
簡素化してあげることが大事

<br>

つまり、人がやらなくて良い部分は機械に任せる


## 自動化

## API定義のドキュメント作成を自動化

下記タイミングで、CIにて、<br>
その時点の最新コードからopenapi.yamlを生成し、S3にアップロード

- 作業ブランチをPUSH
  - API定義に変更がある場合限定
- masterにPUSH（＝ STGリリース）

STGのAPI定義は常時、作業ブランチのAPI定義は一定期間閲覧可能

.image ./images/201130_pf-meetup/swagger_search.png _ 900


## より詳細は…

API定義の生成や共有については、<br>
以前、DMM.goで発表したので、よければ以下のスライドもご覧ください

.image ./images/201130_pf-meetup/swagger_detail.png _ 500

.link https://speakerdeck.com/yyh_gl/develop-api-server-by-goa Goaを使ってAPIサーバ開発してみた


## DBスキーマ定義のドキュメント作成を自動化

[k1low/tbls](https://github.com/k1LoW/tbls)というGo製ツールを使用

<br>

下記のようなシンプルな設定ファイル `.tbls.yml` を作成し、

.code ./examples/201130_pf-meetup/.tbls.yml

コマンドを実行すると

.code ./examples/201130_pf-meetup/tbls

DBスキーマ定義がsvgおよびマークダウン形式で出力される ▶▶▶

## 生成物：テーブル一覧

.image ./images/201130_pf-meetup/tables.png _ 700

## 生成物：テーブル詳細

.image ./images/201130_pf-meetup/table.png _ 700

## 生成物：全テーブルの関連

.image ./images/201130_pf-meetup/relations.png _ 900

## 生成物：概要（README.md）

`README.md`にDB全体のスキーマ定義を出力

<br>

.image ./images/201130_pf-meetup/readme.png _ 1000


## DBスキーマ定義のドキュメントを共有

生成されたドキュメントは、<br>
アプリケーションコードとは別のGitHubリポジトリにPUSH

<br>

**ドキュメントはsvgおよびマークダウン形式なので、GitHubと相性が良い**

## おまけ：リリースノート作成を自動化

リリース管理のために、PRDリリース時にリリースノートを作成している

作成自体は[goreleaser/goreleaser](https://github.com/goreleaser/goreleaser)
というGo製ツールを使用

CIに組み込んでおり、タグPUSHをトリガーにリリースノートを生成

.image ./images/201130_pf-meetup/goreleaser.png _ 550


## 自動化により…

- **日常的な認識合わせにかかる手間を削減**
- **廃れないドキュメントを実現**
- 人にしかできない作業に集中
- 人的ミスの排除


## まとめ

<u>**事業グロースのために最短距離でリリース**</u>

最短距離でリリースするための取り組みを紹介し、
それぞれ効果を実感

- 手戻りをなくすための努力
  - みんなでユーザーストーリーマッピング作成
  - みんなでデザインレビュー
  - みんなでAPI定義レビュー
- 自動化によって上記の取り組みをサポート
  - API定義のドキュメント化
  - DBスキーマ定義のドキュメント化
  - （リリース作業）
